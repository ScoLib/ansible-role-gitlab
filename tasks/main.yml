---
- name: 创建相关目录
  file: name={{ item }} state=directory
  with_items:
  - /opt/kube/images 

# 推送离线docker 镜像，可以忽略执行错误

- name: 检查是否已下载离线 gitlab 镜像
  command: "ls {{ base_dir }}/down"
  register: download_info
  connection: local
  run_once: true
- name: 尝试推送离线 docker 镜像（若执行失败，可忽略）
  copy: src={{ base_dir }}/down/{{ item }} dest=/opt/kube/images/{{ item }}
  when: 'item in download_info.stdout'
  with_items:
  - "{{ gitlab_ee_offline }}"
  - "{{ gitlab_shell_offline }}"
  - "{{ gitlab_kubectl_offline }}"
  - "{{ gitlab_exporter_offline }}"
  - "{{ gitlab_certificates_offline }}"
  - "{{ gitlab_runner_offline }}"
  - "{{ gitlab_gitaly_offline }}"
  ignore_errors: true
- name: 获取 gitlab 离线镜像推送情况
  command: "ls /opt/kube/images"
  register: image_info

- stat:
    path: {{ docker_bin }}
  register: docker

# 如果目录下有离线镜像，就把它导入到node节点上
- name: 导入 gitlab的离线镜像（若执行失败，可忽略）
  shell: "{{ docker_bin }} load -i /opt/kube/images/{{ item }}"
  with_items:
  - "{{ gitlab_ee_offline }}"
  - "{{ gitlab_shell_offline }}"
  - "{{ gitlab_kubectl_offline }}"
  - "{{ gitlab_exporter_offline }}"
  - "{{ gitlab_certificates_offline }}"
  - "{{ gitlab_runner_offline }}"
  - "{{ gitlab_gitaly_offline }}"
  ignore_errors: true
  when: "item in image_info.stdout and docker.stat.exists"

- stat:
    path: {{ helm_bin }}
  register: helm

- name: 部署 gitlab
  shell: "{{ helm_bin }} install gitlab/gitlab"
  connection: local
  run_once: true
  when: helm.stat.exists